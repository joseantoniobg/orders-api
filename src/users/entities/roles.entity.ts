import { ApiProperty } from '@nestjs/swagger';
import {
  Column,
  CreateDateColumn,
  DeleteDateColumn,
  Index,
  UpdateDateColumn,
  PrimaryGeneratedColumn,
  BaseEntity,
  Entity,
  JoinColumn,
  ManyToOne,
  OneToMany,
} from 'typeorm';

@Entity('users_roles')
export class UsersRoles extends BaseEntity {
  @ApiProperty({
    description: 'autogenerated id for the user',
    example: 1,
  })
  @PrimaryGeneratedColumn()
  id_role: number;

  @ApiProperty({
    description: 'login for the user',
    example: 'joseantoniobg',
  })
  @Index('ix_key', { unique: true })
  @Column({ type: 'varchar', length: 50 })
  unique_key: string;

  @Column({ type: 'bool', nullable: true })
  show_menu: boolean;

  @Index('ix_link', { unique: true })
  @Column({ type: 'varchar', length: 100, nullable: true })
  link: string;

  @ApiProperty({
    description: 'the role description',
    example: 'user can edit orders',
  })
  @Column({ type: 'varchar', length: 200 })
  description: string;

  @Column({ nullable: true })
  id_role_child: number;

  @JoinColumn({ name: 'id_role_child' })
  @ManyToOne(() => UsersRoles, { nullable: true })
  child_role: UsersRoles;

  @ApiProperty({
    description: 'readable description for the role',
    example: 1,
  })
  @ApiProperty({
    description: 'timestamp when the user was created',
  })
  @CreateDateColumn({ type: 'timestamp with time zone' })
  created_at: Date;

  @ApiProperty({
    description: 'timestamp when the user was last updated',
  })
  @UpdateDateColumn({ type: 'timestamp with time zone' })
  updated_at: Date;

  @ApiProperty({
    description: 'timestamp when the user was deleted',
    required: false,
  })
  @DeleteDateColumn({ type: 'timestamp with time zone' })
  deleted_at: Date;
}
